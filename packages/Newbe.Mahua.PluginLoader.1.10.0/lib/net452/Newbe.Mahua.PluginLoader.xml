<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newbe.Mahua.PluginLoader</name>
    </assembly>
    <members>
        <member name="T:Newbe.Mahua.Apis.AcceptFriendAddingRequestApiMahuaCommand">
            <summary>
            同意添加好友请求
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.AcceptGroupJoiningInvitationApiMahuaCommand">
            <summary>
            接受入群邀请
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.AcceptGroupJoiningRequestApiMahuaCommand">
            <summary>
            管理员同意入群申请
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.BanFriendApiMahuaCommand">
            <summary>
            将QQ移入黑名单
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.BanGroupAnonymousMemberApiMahuaCommand">
            <summary>
            设置禁言某匿名群员
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.BanGroupMemberApiMahuaCommand">
            <summary>
            禁言某群成员
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.CreateDiscussApiMahuaCommand">
            <summary>
            创建讨论组
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.DisableGroupAdminApiMahuaCommand">
            <summary>
            删除群管理员
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.DissolveGroupApiMahuaCommand">
            <summary>
            解散群
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.EnableGroupAdminApiMahuaCommand">
            <summary>
            设置群管理员
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetBknApiMahuaCommand">
            <summary>
            取bkn
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetCookiesApiMahuaCommand">
            <summary>
            取Cookies
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetDiscussesApiMahuaCommand">
            <summary>
            获取讨论组列表
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetFriendsApiMahuaCommand">
            <summary>
            获取好友列表
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetGroupMemebersApiMahuaCommand">
            <summary>
            获取群成员列表（返回字符串）
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetGroupMemebersWithModelApiMahuaCommand">
            <summary>
            获取群成员列表
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetGroupsApiMahuaCommand">
            <summary>
            获取群列表（返回字符串）
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetGroupsWithModelApiMahuaCommand">
            <summary>
            获取群列表
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetLoginNickApiMahuaCommand">
            <summary>
            取当前登录QQ昵称
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.GetLoginQqApiMahuaCommand">
            <summary>
            取当前登录QQ
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.JoinGroupApiMahuaCommand">
            <summary>
            主动加群
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.KickDiscussMemberApiMahuaCommand">
            <summary>
            踢出讨论组
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.KickGroupMemberApiMahuaCommand">
            <summary>
            移出群成员
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.LeaveDiscussApiMahuaCommand">
            <summary>
            退出讨论组
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.LeaveGroupApiMahuaCommand">
            <summary>
            退出群
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.RejectFriendAddingRequestApiMahuaCommand">
            <summary>
            拒绝添加好友请求
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.RejectGroupJoiningInvitationApiMahuaCommand">
            <summary>
            拒绝入群邀请
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.RejectGroupJoiningRequestApiMahuaCommand">
            <summary>
            管理员拒绝入群申请
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.RemoveBanFriendApiMahuaCommand">
            <summary>
            将QQ移出黑名单
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.RemoveBanGroupMemberApiMahuaCommand">
            <summary>
            取消禁言某群成员
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.RemoveFriendApiMahuaCommand">
            <summary>
            删除好友
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SendDiscussJoiningInvitationApiMahuaCommand">
            <summary>
            发送讨论组邀请
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SendDiscussMessageApiMahuaCommand">
            <summary>
            发送讨论组消息
            </summary>
        </member>
        <member name="P:Newbe.Mahua.Apis.SendDiscussMessageApiMahuaCommand.ToDiscuss">
            <summary>
            讨论组
            </summary>
        </member>
        <member name="P:Newbe.Mahua.Apis.SendDiscussMessageApiMahuaCommand.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SendGroupJoiningInvitationApiMahuaCommand">
            <summary>
            发送入群邀请
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SendGroupMessageApiMahuaCommand">
            <summary>
            发送群消息
            </summary>
        </member>
        <member name="P:Newbe.Mahua.Apis.SendGroupMessageApiMahuaCommand.ToGroup">
            <summary>
            目标群
            </summary>
        </member>
        <member name="P:Newbe.Mahua.Apis.SendGroupMessageApiMahuaCommand.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SendLikeApiMahuaCommand">
            <summary>
            发送名片赞
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SendPrivateMessageApiMahuaCommand">
            <summary>
            发送私聊消息
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SetBanAllGroupMembersOptionApiMahuaCommand">
            <summary>
            设置全群禁言
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SetGroupAnonymousOptionApiMahuaCommand">
            <summary>
            设置群匿名设置
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SetGroupMemberCardApiMahuaCommand">
            <summary>
            设置群成员名片
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SetGroupMemberSpecialTitleApiMahuaCommand">
            <summary>
            设置群成员专属头衔
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Apis.SetNoticeApiMahuaCommand">
            <summary>
            发布群公告
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Logging.ILog.Log(Newbe.Mahua.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:Newbe.Mahua.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Newbe.Mahua.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Newbe.Mahua.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Newbe.Mahua.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Newbe.Mahua.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Newbe.Mahua.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProvider.SetCurrentLogProvider(Newbe.Mahua.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Newbe.Mahua.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newbe.Mahua.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Newbe.Mahua.Logging.LogProvider.SetCurrentLogProvider(Newbe.Mahua.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Newbe.Mahua.Logging.ILog"/></returns>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Newbe.Mahua.Logging.ILog"/></returns>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:Newbe.Mahua.Logging.ILog"/></returns>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Newbe.Mahua.Logging.ILog"/></returns>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:Newbe.Mahua.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:Newbe.Mahua.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newbe.Mahua.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Newbe.Mahua.CommandCenterMahuaApi">
            <summary>
            通过<see cref="T:Newbe.Mahua.Commands.ICommandCenter"/>实现对API的调用
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Commands.ExceptionHandles.ExceptionHandleCommandCenter">
            <summary>
            带有异常处理功能的<see cref="T:Newbe.Mahua.Commands.ICommandCenter"/>
            </summary>
        </member>
        <member name="T:Newbe.Mahua.Commands.ExceptionHandles.LoggedExceptionOccuredMahuaEvent">
            <summary>
            异常事件发生时，将异常信息写入到日志文件中
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.Load(System.AppDomain,System.String)">
            <summary>
            Loads a dll into the new AppDomain
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.Load(System.AppDomain,System.String,System.String)">
            <summary>
            Loads dlls into the new AppDomain
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any parameters to be passedd to the static method</param>
            <returns>The return value from the function, casted to TResult.</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any arguments to be passedd to the static method</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.Execute``1(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
            <returns>The return value from the function, casted to TResult</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.Execute(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.Create``1(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <typeparam name="TInterfaceType">The handle to the class is automatically cast to the interfafce TInterfaceType</typeparam>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.AssemblyLoader.Create(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="T:Newbe.Mahua.Domains.IDomainLoader">
            <summary>
            Defines the interface for a DomainLoader
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.Load">
            <summary>
            Loads the dlls into the new AppDomain
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.Unload">
            <summary>
            Unloads the AppDomain and deletes files in the cache folder.  The cache folder is where dlls are copied, and run, when using shadow copying.
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any parameters to be passedd to the static method</param>
            <returns>The return value from the function, casted to TResult.</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any arguments to be passedd to the static method</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.Execute``1(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
            <returns>The return value from the function, casted to TResult</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.Execute(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.Create(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.IDomainLoader.Create``1(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <typeparam name="TInterfaceType">The handle to the class is automatically cast to the interfafce TInterfaceType</typeparam>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="T:Newbe.Mahua.Domains.DomainLoader">
            <summary>
            An AppDomain helper class which makes it easy to host relodable AppDomains.  Supports ShadowCopy.
            </summary>
        </member>
        <member name="P:Newbe.Mahua.Domains.DomainLoader.DomainName">
            <summary>
            The name of the new AppDomain
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an AppDomain under the current AppDomain
            </summary>
            <param name="relativeSubFolderForDomain">The relative path to the subfolder which will be the root folder for the new AppDomain</param>
            <param name="useShadowCopy">True to shadow copy files.  This allows dlls to be added, removed or modified while the AppDomain is still loaded.</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates an AppDomain under the current AppDomain
            </summary>
            <param name="domainName">The name for the domain.  If not assigned, or null or empty, a Guid is assigned.</param>
            <param name="relativeSubFolderForDomain">The relative path to the subfolder which will be the root folder for the new AppDomain</param>
            <param name="useShadowCopy">True to shadow copy files.  This allows dlls to be added, removed or modified while the AppDomain is still loaded.</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Finalize">
            <summary>
            Destructs the DomainLoader instance.  Calls Dispose.
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Unload">
            <summary>
            Unloads the AppDomain and deletes files in the cache folder.  The cache folder is where dlls are copied, and run, when using shadow copying.
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Load">
            <summary>
            Loads the dlls into the new AppDomain
            </summary>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.ExecuteStaticMethod``1(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any parameters to be passedd to the static method</param>
            <returns>The return value from the function, casted to TResult.</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.ExecuteStaticMethod(System.String,System.String,System.Object[])">
            <summary>
            Executes a static method on the specified type across the AppDomain
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="staticMethodName">The name of the static method</param>
            <param name="args">Any arguments to be passedd to the static method</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Execute``1(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <typeparam name="TResult">The result of the function call is cast to TResult</typeparam>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
            <returns>The return value from the function, casted to TResult</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Execute(System.String,System.String,System.Object[])">
            <summary>
            Instantiates a class and calls a method exposed by it.
            </summary>
            <param name="typeName">The name of the type which exposes the static method</param>
            <param name="methodName">The name of the static method</param>
            <param name="args">Any arguments to be passed to the static method</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Create``1(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <typeparam name="TInterfaceType">The handle to the class is automatically cast to the interfafce TInterfaceType</typeparam>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.Create(System.String)">
            <summary>
            Instantiates a class and returns a handle to it.  This handle must be cast to an interface in order to work across AppDomains.
            </summary>
            <param name="typeName">The name of the type which is to be instantiated</param>
            <returns>A handle to the instantiated object.  This value should be cast to an interface as only interfaces will work across AppDomains.</returns>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.DoCallback(System.Action)">
            <summary>
            Executes an action in the context of the hosted AppDomain
            </summary>
            <param name="action">The action to be called in the context of the hosted AppDomain</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.SetData(System.String,System.Object)">
            <summary>
            Sets the value of the specified application domain property
            </summary>
            <param name="name">The name of a predefined or custom domain property</param>
            <param name="data">The value to be assigned to the domain property</param>
        </member>
        <member name="M:Newbe.Mahua.Domains.DomainLoader.GetData``1(System.String)">
            <summary>
            Gets the value stored in the current application domain for the specified name
            </summary>
            <param name="name">The name of a predefined or custom domain property</param>
            <typeparam name="TData">The type of data to be returned</typeparam>
            <returns>The data stored in the domain property as cast to T</returns>
        </member>
        <member name="M:Newbe.Mahua.IContainerSaver.GetLifetimeScope">
            <summary>
            获取当前上下文运行的容器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newbe.Mahua.IContainerSaver.SetLifetimeScope(Autofac.ILifetimeScope)">
            <summary>
            设置当前上下文运行的容器
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Newbe.Mahua.IContainerSaver.GetSourceContainer">
            <summary>
            获取全局的容器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newbe.Mahua.IContainerSaver.SetSourceContainer(Autofac.IContainer)">
            <summary>
            设置全局的容器
            </summary>
            <param name="container"></param>
        </member>
        <member name="T:Newbe.Mahua.MahuaApiRegistrations">
            <summary>
            用于在<see cref="T:Newbe.Mahua.IMahuaModule"/>中注册MahuaApi实现类的帮助类
            </summary>
        </member>
        <member name="F:Newbe.Mahua.MahuaApiRegistrations.ApiHandlerAuthorNames">
            <summary>
            记录API实现者的作者名称，用于创建对应实现类时进行索引
            </summary>
        </member>
        <member name="M:Newbe.Mahua.MahuaApiRegistrations.RegisterMahuaApi``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册MahuaApi的实现类
            </summary>
            <typeparam name="THandler"></typeparam>
            <typeparam name="TCmd"></typeparam>
            <param name="builder"></param>
            <param name="authorName">实现此API的作者名称，若当前进程存在多个作者，则作者名称需要各不相同</param>
        </member>
        <member name="M:Newbe.Mahua.MahuaApiRegistrations.RegisterMahuaApi``3(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册MahuaApi的实现类
            </summary>
            <typeparam name="THandler"></typeparam>
            <typeparam name="TCmd"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="builder"></param>
            <param name="authorName">实现此API的作者名称，若当前进程存在多个作者，则作者名称需要各不相同</param>
        </member>
        <member name="T:Newbe.Mahua.PluginFileInfo">
            <summary>
            插件信息
            </summary>
        </member>
        <member name="P:Newbe.Mahua.PluginFileInfo.Name">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Newbe.Mahua.PluginFileInfo.PluginApiExporterRuntimeFullpath">
            <summary>
            运行时插件dll路径，CQP在运行时会将插件dll复制到tmp目录运行，这个变量就指向这个路径
            </summary>
        </member>
        <member name="P:Newbe.Mahua.PluginFileInfo.PluginEntryPointDllFullFilename">
            <summary>
            插件真实的入口dll文件路径
            </summary>
        </member>
        <member name="P:Newbe.Mahua.PluginFileInfo.PluginEntyPointDirectory">
            <summary>
            插件Dll所在文件夹
            </summary>
        </member>
        <member name="P:Newbe.Mahua.PluginFileInfo.PluginEntryPointConfigFullFilename">
            <summary>
            插件的app.config文件路径
            </summary>
        </member>
        <member name="T:Newbe.Mahua.PluginInstanceManager">
            <summary>
            插件实例管理器
            </summary>
        </member>
        <member name="T:Newbe.Mahua.PluginLoadException">
            <summary>
            插件加载异常
            </summary>
        </member>
        <member name="M:Newbe.Mahua.PluginLoadException.#ctor(System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="pluginName"></param>
            <param name="reason"></param>
        </member>
        <member name="P:Newbe.Mahua.PluginLoadException.PluginName">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="P:Newbe.Mahua.PluginLoadException.Reason">
            <summary>
            原因
            </summary>
        </member>
        <member name="P:Newbe.Mahua.PluginLoadException.Message">
            <summary>
            错误信息
            </summary>
        </member>
    </members>
</doc>
